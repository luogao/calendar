{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CALENDAR_STORE_KEY","emptyEvent","title","start","Date","end","backgroundColor","borderColor","textColor","allDay","App","storeEvent","localStorage","getItem","JSON","parse","_React$useState","React","useState","_React$useState2","Object","slicedToArray","event","setEvent","_React$useState3","_React$useState4","open","setOpen","_React$useState5","_React$useState6","isEdit","setIsEdit","_React$useState7","_React$useState8","currentEvent","setCurrentEvent","fc","useRef","calendarWrapper","handleClickOpen","handleClose","useEffect","setItem","stringify","react_default","a","createElement","className","ref","main_esm","height","events","eventClick","e","console","log","_e$event","id","selectable","eventStartEditable","droppable","editable","dateClick","select","objectSpread","locale","zhCnLocale","theme","defaultView","plugins","dayGridPlugin","interactionPlugin","eventDrop","_e$event2","targetIndex","findIndex","splice","concat","toConsumableArray","Button","onClick","html2canvas","document","querySelector","ignoreElements","el","then","canvas","fileName","content","aLink","blob","code","parts","split","contentType","raw","window","atob","rawLength","length","uInt8Array","Uint8Array","i","charCodeAt","Blob","type","base64Img2Blob","download","href","URL","createObjectURL","click","downloadFile","nanoid","generate","toDataURL","getImgSrc","variant","color","fullWidth","Dialog","onClose","aria-labelledby","maxWidth","DialogTitle","DialogContent","TextField","multiline","autoFocus","margin","label","placeholder","value","onInput","target","material_ui_pickers_esm","utils","DateFnsUtils","zhCNLocale","Grid","container","justify","spacing","item","xs","autoOk","format","disableToolbar","onChange","date","DialogActions","newEvent","filter","editEvent","_currentEvent","addEvent","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.636d19c8.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport html2canvas from 'html2canvas'\nimport nanoid from 'nanoid'\nimport 'date-fns'\n// import { ChromePicker } from 'react-color'\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport zhCnLocale from '@fullcalendar/core/locales/zh-cn'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Grid from '@material-ui/core/Grid'\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport zhCNLocale from 'date-fns/locale/zh-CN'\n\nimport './main.scss' // webpack must be configured to do this\nconst CALENDAR_STORE_KEY = 'calendar_event_store'\nconst emptyEvent = {\n  title: '无标题',\n  start: new Date(),\n  end: new Date(),\n  backgroundColor: '#000000',\n  borderColor: '#000000',\n  textColor: '#ffffff',\n  allDay: true\n}\n\nfunction App() {\n  const storeEvent = localStorage.getItem(CALENDAR_STORE_KEY) ? JSON.parse(localStorage.getItem(CALENDAR_STORE_KEY)) : []\n  const [event, setEvent] = React.useState(storeEvent)\n  const [open, setOpen] = React.useState(false)\n  const [isEdit, setIsEdit] = React.useState(false)\n  const [currentEvent, setCurrentEvent] = React.useState(emptyEvent)\n\n  let fc = React.useRef()\n  let calendarWrapper = React.useRef()\n\n  React.useEffect(() => {\n    localStorage.setItem(CALENDAR_STORE_KEY, JSON.stringify(event))\n  })\n\n  function handleStartDateChange(date) {\n    setCurrentEvent({ ...currentEvent, start: date })\n  }\n\n  function handleEndDateChange(date) {\n    setCurrentEvent({ ...currentEvent, end: date })\n  }\n\n  function handleClickOpen() {\n    setOpen(true)\n  }\n\n  function editEvent() {\n    const targetIndex = event.findIndex(e => e.id === currentEvent.id)\n    event.splice(targetIndex, 1)\n    setEvent([...event, currentEvent])\n  }\n\n  function addEvent() {\n    const _currentEvent = {\n      ...currentEvent,\n      id: nanoid(8)\n    }\n    setEvent([...event, _currentEvent])\n  }\n\n  function handleSaveEvent() {\n    isEdit ? editEvent() : addEvent()\n    handleClose()\n    setCurrentEvent(emptyEvent)\n  }\n\n  function handleClose() {\n    setOpen(false)\n  }\n\n  function handleSave() {\n    html2canvas(document.querySelector('.calendar-wrapper'), {\n      ignoreElements: el => el.className === 'fc-right'\n    }).then(function(canvas) {\n      downloadFile(generate(), getImgSrc(canvas))\n    })\n  }\n\n  function getImgSrc(canvas) {\n    const dataUrl = canvas.toDataURL('image/png')\n    return dataUrl\n  }\n\n  function base64Img2Blob(code) {\n    var parts = code.split(';base64,')\n    var contentType = parts[0].split(':')[1]\n    var raw = window.atob(parts[1])\n    var rawLength = raw.length\n\n    var uInt8Array = new Uint8Array(rawLength)\n\n    for (var i = 0; i < rawLength; ++i) {\n      uInt8Array[i] = raw.charCodeAt(i)\n    }\n\n    return new Blob([uInt8Array], { type: contentType })\n  }\n\n  function generate() {\n    const prefix = 'calendar'\n    const id = nanoid(5)\n    return `${prefix}-${id}`\n  }\n\n  function downloadFile(fileName, content) {\n    var aLink = document.createElement('a')\n    var blob = base64Img2Blob(content) //new Blob([content]);\n    aLink.download = fileName\n    aLink.href = URL.createObjectURL(blob)\n    aLink.click()\n  }\n\n  function handleCancel() {\n    setCurrentEvent(emptyEvent)\n    handleClose()\n  }\n\n  function handleSelect(e) {\n    console.log('handleSelect', e)\n    const { end, start } = e\n    setIsEdit(false)\n    setCurrentEvent({ ...currentEvent, end, start })\n    handleClickOpen()\n  }\n\n  function handleDateClick(e) {\n    // console.log('handleDateClick', e)\n  }\n\n  function handleEventClick(e) {\n    console.log('handleEventClick', e.event)\n    const { title, start, end, backgroundColor, borderColor, textColor, id, allDay } = e.event\n    setCurrentEvent({ title, start, end, backgroundColor, borderColor, textColor, id, allDay })\n    setIsEdit(true)\n    handleClickOpen()\n  }\n\n  function handleDelete() {\n    const newEvent = event.filter(e => e.id !== currentEvent.id)\n    setEvent([...newEvent])\n    handleClose()\n  }\n\n  function handleTitleInput(e) {\n    setCurrentEvent({\n      ...currentEvent,\n      title: e.target.value\n    })\n  }\n\n  function handleTextColorChange(e) {\n    setCurrentEvent({\n      ...currentEvent,\n      textColor: e.target.value\n    })\n  }\n\n  function handleBgColorChange(e) {\n    setCurrentEvent({\n      ...currentEvent,\n      backgroundColor: e.target.value,\n      borderColor: e.target.value\n    })\n  }\n\n  function handleEventDrop(e) {\n    const { title, start, end, backgroundColor, borderColor, textColor, id, allDay } = e.event\n    const targetIndex = event.findIndex(e => e.id === id)\n    event.splice(targetIndex, 1)\n    setEvent([...event, { title, start, end, backgroundColor, borderColor, textColor, id, allDay }])\n  }\n\n  return (\n    <div className=\"App\">\n      <main>\n        <div className=\"calendar-wrapper\" ref={calendarWrapper}>\n          <FullCalendar\n            height=\"parent\"\n            ref={fc}\n            events={event}\n            eventClick={handleEventClick}\n            selectable\n            eventStartEditable\n            droppable\n            editable\n            dateClick={handleDateClick}\n            select={handleSelect}\n            locale={zhCnLocale}\n            theme=\"cosmo\"\n            defaultView=\"dayGridMonth\"\n            plugins={[dayGridPlugin, interactionPlugin]}\n            eventDrop={handleEventDrop}\n          />\n        </div>\n        <div className=\"side-bar\">\n          <Button onClick={handleSave} variant=\"contained\" color=\"primary\" fullWidth>\n            保存\n          </Button>\n        </div>\n      </main>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" maxWidth=\"sm\" fullWidth>\n        <DialogTitle id=\"form-dialog-title\">{isEdit ? '编辑日程' : '新建日程'}</DialogTitle>\n        <DialogContent>\n          <TextField\n            multiline\n            autoFocus\n            margin=\"dense\"\n            label=\"日程内容\"\n            fullWidth\n            placeholder=\"请输入日程内容\"\n            value={currentEvent.title}\n            onInput={handleTitleInput}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils} locale={zhCNLocale}>\n            <Grid container justify=\"space-between\" spacing={3}>\n              <Grid item xs={6}>\n                <KeyboardDatePicker\n                  autoOk\n                  fullWidth\n                  format=\"yyyy-MM-dd\"\n                  margin=\"dense\"\n                  disableToolbar\n                  variant=\"inline\"\n                  label=\"开始时间\"\n                  value={currentEvent.start}\n                  onChange={handleStartDateChange}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <KeyboardDatePicker\n                  autoOk\n                  fullWidth\n                  format=\"yyyy-MM-dd\"\n                  margin=\"dense\"\n                  disableToolbar\n                  variant=\"inline\"\n                  label=\"结束时间\"\n                  value={currentEvent.end}\n                  onChange={handleEndDateChange}\n                />\n              </Grid>\n            </Grid>\n          </MuiPickersUtilsProvider>\n          <div className=\"color-picker-wrapper\">\n            <div className=\"color-picker-label\"> 文字 </div>\n            <input type=\"color\" value={currentEvent.textColor} onChange={handleTextColorChange} />\n          </div>\n          <div className=\"color-picker-wrapper\">\n            <div className=\"color-picker-label\"> 背景 </div>\n            <input type=\"color\" value={currentEvent.backgroundColor} onChange={handleBgColorChange} />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          {currentEvent.id && (\n            <Button onClick={handleDelete} color=\"secondary\">\n              删除\n            </Button>\n          )}\n          <Button onClick={handleCancel} color=\"primary\">\n            取消\n          </Button>\n          <Button onClick={handleSaveEvent} color=\"primary\">\n            保存\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}